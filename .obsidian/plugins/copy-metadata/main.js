/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => CopyMetadata
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  useKeyupEvents: false,
  timeout: 10,
  creationTimeFormat: "YYYYMMDDHHmm",
  copyCreationTimeToClipboard: true,
  appendCreationTimeFormat: "YYYYMMDDHHmm",
  appendCreationTimeToFileName: false
};
var CopyMetadata = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.timer = {};
  }
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new CopyMetadataSettingTab(this.app, this));
    this.addCommand({
      id: "copy-creation-time-to-clipboard",
      name: "Copy creation time to clipboard",
      callback: () => this.copyCreationTime()
    });
    this.addCommand({
      id: "append-creation-time-to-file-name",
      name: "Append creation time to file name",
      callback: () => this.appendCreationTimeToFileName()
    });
  }
  async copyCreationTime() {
    const activeFile = this.app.workspace.getActiveFile();
    if (activeFile) {
      const creationTime = (0, import_obsidian.moment)(activeFile.stat.ctime).format(this.settings.creationTimeFormat);
      navigator.clipboard.writeText(creationTime);
    }
  }
  async appendCreationTimeToFileName() {
    const activeFile = this.app.workspace.getActiveFile();
    if (activeFile) {
      const creationTime = (0, import_obsidian.moment)(activeFile.stat.ctime).format(this.settings.appendCreationTimeFormat);
      const newFileName = `${activeFile.basename}${creationTime}.${activeFile.extension}`;
      const newFilePath = `${activeFile.path.substring(0, activeFile.path.lastIndexOf("/"))}/${newFileName}`;
      try {
        if (this.settings.appendCreationTimeToFileName) {
          await this.app.fileManager.renameFile(activeFile, newFilePath);
          new import_obsidian.Notice("File name updated successfully.");
          console.log("File name updated successfully.");
        } else {
          new import_obsidian.Notice("Append creation time to file name setting is disabled!");
        }
      } catch (error) {
        new import_obsidian.Notice("Failed to update file name!");
        console.log(error);
      }
    } else {
      new import_obsidian.Notice("No active file to update!");
    }
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  /**
   * Use a timeout to update the metadata only once the user has stopped typing.
   * If the user keeps typing, then it will reset the timeout and start again from zero.
   *
   * Obsidian doesn't appear to correctly handle this situation otherwise, and pops an
   * error to say "<File> has been modified externally, merging changes automatically."
   *
   * @param {TFile} file
   */
};
var CopyMetadataSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    this.containerEl.createEl("h3", {
      text: "Please try reopening the vault or restarting Obsidian if the following setting changes do not take effect."
    });
    new import_obsidian.Setting(containerEl).setName("Copy creation time format").setDesc("MomentJS format, e.g., YYYY-MM-DDTHH:mm.").addText((text) => text.setPlaceholder("YYYY-MM-DDTHH:mm").setValue(this.plugin.settings.creationTimeFormat).onChange(async (value) => {
      this.plugin.settings.creationTimeFormat = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Append creation time to file name").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.appendCreationTimeToFileName).onChange(async (value) => {
        this.plugin.settings.appendCreationTimeToFileName = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Append creation time format").setDesc("MomentJS format, e.g., YYYY-MM-DDTHH:mm.").addText((text) => text.setPlaceholder("YYYYMMDDHHmm").setValue(this.plugin.settings.appendCreationTimeFormat).onChange(async (value) => {
      this.plugin.settings.appendCreationTimeFormat = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgQXBwLCBQbHVnaW4sIFBsdWdpblNldHRpbmdUYWIsIFNldHRpbmcsIFRGaWxlLCBtb21lbnQsIE5vdGljZSB9IGZyb20gJ29ic2lkaWFuJ1xuXG5pbnRlcmZhY2UgQ29weU1ldGFkYXRhU2V0dGluZ3Mge1xuICB1c2VLZXl1cEV2ZW50czogYm9vbGVhbjtcbiAgdGltZW91dDogbnVtYmVyO1xuICBjcmVhdGlvblRpbWVGb3JtYXQ6IHN0cmluZztcbiAgY29weUNyZWF0aW9uVGltZVRvQ2xpcGJvYXJkOiBib29sZWFuO1xuICBhcHBlbmRDcmVhdGlvblRpbWVGb3JtYXQ6IHN0cmluZztcbiAgYXBwZW5kQ3JlYXRpb25UaW1lVG9GaWxlTmFtZTogYm9vbGVhbjtcbn1cblxuY29uc3QgREVGQVVMVF9TRVRUSU5HUzogQ29weU1ldGFkYXRhU2V0dGluZ3MgPSB7XG4gIHVzZUtleXVwRXZlbnRzOiBmYWxzZSxcbiAgdGltZW91dDogMTAsXG4gIGNyZWF0aW9uVGltZUZvcm1hdDogJ1lZWVlNTURESEhtbScsXG4gIGNvcHlDcmVhdGlvblRpbWVUb0NsaXBib2FyZDogdHJ1ZSxcbiAgYXBwZW5kQ3JlYXRpb25UaW1lRm9ybWF0OiAnWVlZWU1NRERISG1tJyxcbiAgYXBwZW5kQ3JlYXRpb25UaW1lVG9GaWxlTmFtZTogZmFsc2UsXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvcHlNZXRhZGF0YSBleHRlbmRzIFBsdWdpbiB7XG4gIHNldHRpbmdzOiBDb3B5TWV0YWRhdGFTZXR0aW5nc1xuICB0aW1lcjogeyBba2V5OiBzdHJpbmddOiBudW1iZXIgfSA9IHt9XG5cbiAgYXN5bmMgb25sb2FkICgpIHtcbiAgICBhd2FpdCB0aGlzLmxvYWRTZXR0aW5ncygpXG5cbiAgICB0aGlzLmFkZFNldHRpbmdUYWIobmV3IENvcHlNZXRhZGF0YVNldHRpbmdUYWIodGhpcy5hcHAsIHRoaXMpKVxuXG4gICAgLy8gQWRkIGNvbW1hbmRzXG4gICAgdGhpcy5hZGRDb21tYW5kKHtcbiAgICAgIGlkOiAnY29weS1jcmVhdGlvbi10aW1lLXRvLWNsaXBib2FyZCcsXG4gICAgICBuYW1lOiAnQ29weSBjcmVhdGlvbiB0aW1lIHRvIGNsaXBib2FyZCcsXG4gICAgICBjYWxsYmFjazogKCkgPT4gdGhpcy5jb3B5Q3JlYXRpb25UaW1lKCksXG4gICAgfSk7XG5cbiAgICB0aGlzLmFkZENvbW1hbmQoe1xuICAgICAgaWQ6ICdhcHBlbmQtY3JlYXRpb24tdGltZS10by1maWxlLW5hbWUnLFxuICAgICAgbmFtZTogJ0FwcGVuZCBjcmVhdGlvbiB0aW1lIHRvIGZpbGUgbmFtZScsXG4gICAgICBjYWxsYmFjazogKCkgPT4gdGhpcy5hcHBlbmRDcmVhdGlvblRpbWVUb0ZpbGVOYW1lKCksXG4gICAgfSk7XG4gIH1cblxuICBhc3luYyBjb3B5Q3JlYXRpb25UaW1lKCkge1xuICAgIGNvbnN0IGFjdGl2ZUZpbGUgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlRmlsZSgpO1xuICAgIGlmIChhY3RpdmVGaWxlKSB7XG4gICAgICBjb25zdCBjcmVhdGlvblRpbWUgPSBtb21lbnQoYWN0aXZlRmlsZS5zdGF0LmN0aW1lKS5mb3JtYXQodGhpcy5zZXR0aW5ncy5jcmVhdGlvblRpbWVGb3JtYXQpO1xuICAgICAgbmF2aWdhdG9yLmNsaXBib2FyZC53cml0ZVRleHQoY3JlYXRpb25UaW1lKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBhcHBlbmRDcmVhdGlvblRpbWVUb0ZpbGVOYW1lKCkge1xuICAgIGNvbnN0IGFjdGl2ZUZpbGUgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlRmlsZSgpO1xuICAgIGlmIChhY3RpdmVGaWxlKSB7XG4gICAgICBjb25zdCBjcmVhdGlvblRpbWUgPSBtb21lbnQoYWN0aXZlRmlsZS5zdGF0LmN0aW1lKS5mb3JtYXQodGhpcy5zZXR0aW5ncy5hcHBlbmRDcmVhdGlvblRpbWVGb3JtYXQpO1xuXG4gICAgICAvLyBDcmVhdGUgdGhlIG5ldyBmaWxlIG5hbWUgYnkgYXBwZW5kaW5nIHRoZSBjcmVhdGlvbiB0aW1lIHRvIHRoZSBleGlzdGluZyBuYW1lXG4gICAgICBjb25zdCBuZXdGaWxlTmFtZSA9IGAke2FjdGl2ZUZpbGUuYmFzZW5hbWV9JHtjcmVhdGlvblRpbWV9LiR7YWN0aXZlRmlsZS5leHRlbnNpb259YDtcblxuICAgICAgLy8gQ3JlYXRlIHRoZSBuZXcgZmlsZSBwYXRoIGJ5IGFwcGVuZGluZyB0aGUgbmV3IGZpbGUgbmFtZSB0byB0aGUgY3VycmVudCBkaXJlY3RvcnlcbiAgICAgIGNvbnN0IG5ld0ZpbGVQYXRoID0gYCR7YWN0aXZlRmlsZS5wYXRoLnN1YnN0cmluZygwLCBhY3RpdmVGaWxlLnBhdGgubGFzdEluZGV4T2YoXCIvXCIpKX0vJHtuZXdGaWxlTmFtZX1gO1xuXG4gICAgICAvLyBSZW5hbWUgdGhlIGZpbGVcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmFwcGVuZENyZWF0aW9uVGltZVRvRmlsZU5hbWUpIHtcbiAgICAgICAgICBhd2FpdCB0aGlzLmFwcC5maWxlTWFuYWdlci5yZW5hbWVGaWxlKGFjdGl2ZUZpbGUsIG5ld0ZpbGVQYXRoKTtcbiAgICAgICAgICBuZXcgTm90aWNlKCdGaWxlIG5hbWUgdXBkYXRlZCBzdWNjZXNzZnVsbHkuJyk7XG4gICAgICAgICAgY29uc29sZS5sb2coJ0ZpbGUgbmFtZSB1cGRhdGVkIHN1Y2Nlc3NmdWxseS4nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuZXcgTm90aWNlKCdBcHBlbmQgY3JlYXRpb24gdGltZSB0byBmaWxlIG5hbWUgc2V0dGluZyBpcyBkaXNhYmxlZCEnKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgbmV3IE5vdGljZSgnRmFpbGVkIHRvIHVwZGF0ZSBmaWxlIG5hbWUhJyk7XG4gICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbmV3IE5vdGljZSgnTm8gYWN0aXZlIGZpbGUgdG8gdXBkYXRlIScpO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGxvYWRTZXR0aW5ncyAoKSB7XG4gICAgdGhpcy5zZXR0aW5ncyA9IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfU0VUVElOR1MsIGF3YWl0IHRoaXMubG9hZERhdGEoKSlcbiAgfVxuXG4gIGFzeW5jIHNhdmVTZXR0aW5ncyAoKSB7XG4gICAgYXdhaXQgdGhpcy5zYXZlRGF0YSh0aGlzLnNldHRpbmdzKVxuICB9XG5cbiAgLyoqXG4gICAqIFVzZSBhIHRpbWVvdXQgdG8gdXBkYXRlIHRoZSBtZXRhZGF0YSBvbmx5IG9uY2UgdGhlIHVzZXIgaGFzIHN0b3BwZWQgdHlwaW5nLlxuICAgKiBJZiB0aGUgdXNlciBrZWVwcyB0eXBpbmcsIHRoZW4gaXQgd2lsbCByZXNldCB0aGUgdGltZW91dCBhbmQgc3RhcnQgYWdhaW4gZnJvbSB6ZXJvLlxuICAgKlxuICAgKiBPYnNpZGlhbiBkb2Vzbid0IGFwcGVhciB0byBjb3JyZWN0bHkgaGFuZGxlIHRoaXMgc2l0dWF0aW9uIG90aGVyd2lzZSwgYW5kIHBvcHMgYW5cbiAgICogZXJyb3IgdG8gc2F5IFwiPEZpbGU+IGhhcyBiZWVuIG1vZGlmaWVkIGV4dGVybmFsbHksIG1lcmdpbmcgY2hhbmdlcyBhdXRvbWF0aWNhbGx5LlwiXG4gICAqXG4gICAqIEBwYXJhbSB7VEZpbGV9IGZpbGVcbiAgICovXG59XG5cbmNsYXNzIENvcHlNZXRhZGF0YVNldHRpbmdUYWIgZXh0ZW5kcyBQbHVnaW5TZXR0aW5nVGFiIHtcbiAgcGx1Z2luOiBDb3B5TWV0YWRhdGFcblxuICBjb25zdHJ1Y3RvciAoYXBwOiBBcHAsIHBsdWdpbjogQ29weU1ldGFkYXRhKSB7XG4gICAgc3VwZXIoYXBwLCBwbHVnaW4pXG4gICAgdGhpcy5wbHVnaW4gPSBwbHVnaW5cbiAgfVxuXG4gIGRpc3BsYXkgKCk6IHZvaWQge1xuICAgIGNvbnN0IHsgY29udGFpbmVyRWwgfSA9IHRoaXNcblxuICAgIGNvbnRhaW5lckVsLmVtcHR5KClcblxuICAgIC8vIHRoaXMuY29udGFpbmVyRWwuY3JlYXRlRWwoXCJoMVwiLCB7IHRleHQ6IFwiQ29weSBNZXRhZGF0YVwiIH0pO1xuICBcbiAgICB0aGlzLmNvbnRhaW5lckVsLmNyZWF0ZUVsKFwiaDNcIiwge1xuICAgICAgICB0ZXh0OiBcIlBsZWFzZSB0cnkgcmVvcGVuaW5nIHRoZSB2YXVsdCBvciByZXN0YXJ0aW5nIE9ic2lkaWFuIGlmIHRoZSBmb2xsb3dpbmcgc2V0dGluZyBjaGFuZ2VzIGRvIG5vdCB0YWtlIGVmZmVjdC5cIixcbiAgICB9KTtcblxuICAgIC8vIHRoaXMuY29udGFpbmVyRWwuY3JlYXRlRWwoXCJoMlwiLCB7IHRleHQ6IFwiQ3JlYXRpb24gdGltZVwiIH0pO1xuXG4gICAgLy8gRGF0ZSBmb3JtYXQgZm9yIGNyZWF0aW9uIHRpbWUgc2V0dGluZ1xuICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgIC5zZXROYW1lKCdDb3B5IGNyZWF0aW9uIHRpbWUgZm9ybWF0JylcbiAgICAuc2V0RGVzYygnTW9tZW50SlMgZm9ybWF0LCBlLmcuLCBZWVlZLU1NLUREVEhIOm1tLicpXG4gICAgLmFkZFRleHQodGV4dCA9PiB0ZXh0XG4gICAgICAuc2V0UGxhY2Vob2xkZXIoJ1lZWVktTU0tRERUSEg6bW0nKVxuICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmNyZWF0aW9uVGltZUZvcm1hdClcbiAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcbiAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuY3JlYXRpb25UaW1lRm9ybWF0ID0gdmFsdWU7XG4gICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgfSkpO1xuICAgIFxuICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgIC5zZXROYW1lKCdBcHBlbmQgY3JlYXRpb24gdGltZSB0byBmaWxlIG5hbWUnKVxuICAgIC5hZGRUb2dnbGUodG9nZ2xlID0+IHtcbiAgICAgIHRvZ2dsZVxuICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuYXBwZW5kQ3JlYXRpb25UaW1lVG9GaWxlTmFtZSlcbiAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmFwcGVuZENyZWF0aW9uVGltZVRvRmlsZU5hbWUgPSB2YWx1ZTtcbiAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYSBuZXcgc2V0dGluZyBmb3IgdGhlIGFwcGVuZCBjcmVhdGlvbiB0aW1lIGZvcm1hdFxuICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgIC5zZXROYW1lKCdBcHBlbmQgY3JlYXRpb24gdGltZSBmb3JtYXQnKVxuICAgIC5zZXREZXNjKCdNb21lbnRKUyBmb3JtYXQsIGUuZy4sIFlZWVktTU0tRERUSEg6bW0uJylcbiAgICAuYWRkVGV4dCh0ZXh0ID0+IHRleHRcbiAgICAgIC5zZXRQbGFjZWhvbGRlcignWVlZWU1NRERISG1tJylcbiAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5hcHBlbmRDcmVhdGlvblRpbWVGb3JtYXQpXG4gICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG4gICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmFwcGVuZENyZWF0aW9uVGltZUZvcm1hdCA9IHZhbHVlO1xuICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgIH0pKTtcbiAgfVxufVxuIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHNCQUE4RTtBQVc5RSxJQUFN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
