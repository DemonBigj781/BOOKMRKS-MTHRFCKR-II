/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => CopyMetadata
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  useKeyupEvents: false,
  timeout: 10,
  creationTimeFormat: "YYYYMMDDHHmm",
  copyCreationTimeToClipboard: true,
  appendCreationTimeFormat: "YYYYMMDDHHmm",
  appendCreationTimeToFileName: false
};
var CopyMetadata = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.timer = {};
  }
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new CopyMetadataSettingTab(this.app, this));
    this.addCommand({
      id: "copy-creation-time-to-clipboard",
      name: "Copy creation time to clipboard",
      callback: () => this.copyCreationTime()
    });
    this.addCommand({
      id: "append-creation-time-to-file-name",
      name: "Append creation time to file name",
      callback: () => this.appendCreationTimeToFileName()
    });
  }
  async copyCreationTime() {
    const activeFile = this.app.workspace.getActiveFile();
    if (activeFile) {
      const stat = await this.app.vault.adapter.stat(activeFile.path);
      const creationTime = (0, import_obsidian.moment)(stat.ctime).format(this.settings.creationTimeFormat);
      navigator.clipboard.writeText(creationTime);
    }
  }
  async appendCreationTimeToFileName() {
    const activeFile = this.app.workspace.getActiveFile();
    if (activeFile) {
      const stat = await this.app.vault.adapter.stat(activeFile.path);
      const creationTime = (0, import_obsidian.moment)(stat.ctime).format(this.settings.appendCreationTimeFormat);
      const newFileName = `${activeFile.basename}${creationTime}.${activeFile.extension}`;
      const newFilePath = `${activeFile.path.substring(0, activeFile.path.lastIndexOf("/"))}/${newFileName}`;
      try {
        if (this.settings.appendCreationTimeToFileName) {
          await this.app.fileManager.renameFile(activeFile, newFilePath);
          new import_obsidian.Notice("File name updated successfully.");
          console.log("File name updated successfully.");
        } else {
          new import_obsidian.Notice("Append creation time to file name setting is disabled!");
        }
      } catch (error) {
        new import_obsidian.Notice("Failed to update file name!");
        console.log(error);
      }
    } else {
      new import_obsidian.Notice("No active file to update!");
    }
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  /**
   * Use a timeout to update the metadata only once the user has stopped typing.
   * If the user keeps typing, then it will reset the timeout and start again from zero.
   *
   * Obsidian doesn't appear to correctly handle this situation otherwise, and pops an
   * error to say "<File> has been modified externally, merging changes automatically."
   *
   * @param {TFile} file
   */
};
var CopyMetadataSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    this.containerEl.createEl("h3", {
      text: "Please try reopening the vault or restarting Obsidian if the following setting changes do not take effect."
    });
    new import_obsidian.Setting(containerEl).setName("Copy creation time format").setDesc("MomentJS format, e.g., YYYY-MM-DDTHH:mm.").addText((text) => text.setPlaceholder("YYYY-MM-DDTHH:mm").setValue(this.plugin.settings.creationTimeFormat).onChange(async (value) => {
      this.plugin.settings.creationTimeFormat = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Append creation time to file name").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.appendCreationTimeToFileName).onChange(async (value) => {
        this.plugin.settings.appendCreationTimeToFileName = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Append creation time format").setDesc("MomentJS format, e.g., YYYY-MM-DDTHH:mm.").addText((text) => text.setPlaceholder("YYYYMMDDHHmm").setValue(this.plugin.settings.appendCreationTimeFormat).onChange(async (value) => {
      this.plugin.settings.appendCreationTimeFormat = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
